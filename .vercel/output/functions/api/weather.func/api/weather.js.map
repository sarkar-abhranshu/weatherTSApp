{"version":3,"file":"weather.ts","sources":["C:\\Users\\abhra\\Code\\weatherTSApp\\api\\weather.ts"],"names":[],"mappings":"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","sourcesContent":["import type { VercelRequest, VercelResponse } from \"@vercel/node\";\nimport { Redis } from \"ioredis\";\n\nlet redis: Redis | null = null;\n\n// Initialize Redis connection\nfunction getRedisClient(): Redis | null {\n    if (!redis && process.env.REDIS_URL) {\n        try {\n            redis = new Redis(process.env.REDIS_URL, {\n                maxRetriesPerRequest: 3,\n                retryDelayOnFailover: 100,\n                connectTimeout: 10000,\n                commandTimeout: 5000,\n            });\n\n            redis.on(\"error\", (error) => {\n                console.error(\"Redis connection error:\", error);\n            });\n\n            redis.on(\"connect\", () => {\n                console.log(\"Redis connected successfully\");\n            });\n        } catch (error) {\n            console.error(\"Failed to initialize Redis:\", error);\n        }\n    }\n    return redis;\n}\n\nconst CACHE_DURATION = 10 * 60; // 10 minutes in seconds\n\nfunction getCacheKey(params: any): string {\n    return `weather:${JSON.stringify(params)}`;\n}\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n    if (req.method === \"OPTIONS\") {\n        return res.status(200).end();\n    }\n\n    if (req.method !== \"GET\") {\n        return res.status(405).json({ error: \"Method not allowed\" });\n    }\n\n    const { lat, lon, city, units = \"metric\" } = req.query;\n    const cacheKey = getCacheKey({ lat, lon, city, units });\n    const redisClient = getRedisClient();\n\n    // Try to get cached data\n    if (redisClient) {\n        try {\n            const cached = await redisClient.get(cacheKey);\n            if (cached) {\n                console.log(\"Cache hit for key:\", cacheKey);\n                return res.status(200).json(JSON.parse(cached));\n            }\n            console.log(\"Cache miss for key:\", cacheKey);\n        } catch (error) {\n            console.error(\"Redis get error:\", error);\n        }\n    }\n\n    const API_KEY = process.env.OPENWEATHER_API_KEY;\n\n    if (!API_KEY) {\n        return res\n            .status(500)\n            .json({ error: \"API key not configured on server\" });\n    }\n\n    try {\n        let weatherUrl: string;\n        let cityName: string | undefined;\n\n        if (city) {\n            const geoUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`;\n            const geoResponse = await fetch(geoUrl);\n\n            if (!geoResponse.ok) {\n                throw new Error(`Geocoding failed: ${geoResponse.status}`);\n            }\n\n            const geoData = await geoResponse.json();\n            if (!geoData.length) {\n                return res\n                    .status(404)\n                    .json({ error: `City \"${city}\" not found` });\n            }\n\n            const { lat: cityLat, lon: cityLon, name } = geoData[0];\n            cityName = name;\n            weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${cityLat}&lon=${cityLon}&units=${units}&appid=${API_KEY}`;\n        } else if (lat && lon) {\n            weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=${units}&appid=${API_KEY}`;\n        } else {\n            return res.status(400).json({\n                error: \"Either city name or lat/lon coordinates are required\",\n            });\n        }\n\n        const weatherResponse = await fetch(weatherUrl);\n\n        if (!weatherResponse.ok) {\n            throw new Error(`Weather API failed: ${weatherResponse.status}`);\n        }\n\n        const weatherData = await weatherResponse.json();\n\n        if (cityName) {\n            weatherData.name = cityName;\n        }\n\n        // Cache the result\n        if (redisClient) {\n            try {\n                await redisClient.setex(\n                    cacheKey,\n                    CACHE_DURATION,\n                    JSON.stringify(weatherData),\n                );\n                console.log(\"Data cached for key:\", cacheKey);\n            } catch (error) {\n                console.error(\"Redis set error:\", error);\n            }\n        }\n\n        return res.status(200).json(weatherData);\n    } catch (error) {\n        console.error(\"Weather API error:\", error);\n        return res.status(500).json({ error: \"Failed to fetch weather data\" });\n    }\n}\n"]}